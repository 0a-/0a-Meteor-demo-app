 Meteor.startup(function() {
     if (Article.find().fetch().length === 0) {
         //some db seeding
         Article._collection.insert({
             "category": "Uncategorized",
             "content": "Something is <i>off</i>.\n\nThe mental constructs in my consciousness are as vivid as usual - I am fully aware that there're many things need to be done - but somehow I can not bring myself to do them. I believe I have yet to dedicate myself to the art of languor and become an epitome of slothfulness and unproductivity. I still code on a daily basis and watch lectures and <a href=\"http://static4.businessinsider.com/image/51e6ad3d6bb3f73e6300002d/jon%20stewart%20.jpg\">play the air guitar</a> when I'm free. It is as if there is an ineluctable force preventing me from doing things that I really <i>need</i> to do at a particular moment in time. Similar to the force that stops me from jumping down a building when I fantasize about leaving this reality as I look down from a 24th floor balcony, this invisible force is strong and tremendously hard to overcome. <a href=\"http://www.youtube.com/watch?v=W5ffHd7O3yQ\">Why</a> have things gone this way is the question I long to ask, but what's more important is:\n\nHave I always been like this?\n\n<p class=\"text-center\"> ● ● ● </p>\nHave <i>you</i> always been like this? If true, then this probably has to do with one very fundamental aspect of you that governs your behaviors. To bring yourself to do something that's always in your mind but you have great difficulty actually engaging in doing, you have to understand yourself, form an accurate mental representation of yourself, analyze it and see where this conflict of interest lays. There is always a reason for the existence of such inconsistency in actions and thoughts. Find out what it is, and I believe you will figure out a way to change the situation, my friend. \n\nHave faith in yourself.",
             "coverImg": "assets/img/img.jpg",
             "createdAt": new Date("2014-12-08T09:32:07.156Z"),
             "foot": "",
             "head": "",
             "maxTime": "",
             "metaDescription": "The mental constructs in my consciousness are as vivid as usual.",
             "metaKeywords": "",
             "minTime": "",
             "published": true,
             "publishedAt": new Date("2014-09-10T09:32:42.364Z"),
             "slug": "and-by-you-i-mean-you-who-is-me",
             "subtitle": "",
             "subtitle2": "Archy: \"Cover picture is <a href=\"http://en.wikipedia.org/wiki/Not_to_be_Reproduced\">La reproduction interdite, 1937</a> by one of my favorite artists <a href=\"http://en.wikipedia.org/wiki/Ren%C3%A9_Magritte\">René Magritte</a> whose <a href=\"http://en.wikipedia.org/wiki/Time_Transfixed\"> Time Transfixed, 1938</a> was used as the cover for the 2006 edition of Albert Einstein's <a href=\"http://www.goodreads.com/book/show/15852.Relativity\">Relativity: The Special and the General Theory</a> (published by Penguin Classics) - which is how I got to know him.\"",
             "title": "And by you I mean <i>you</i> who is me",
             "title2": "And by you I mean you who is me",
             "updatedAt": new Date("2014-10-07T10:51:48.850Z")
         });
         Article._collection.insert({
             "category": "JavaScript",
             "content": "A <i>JavaScript closure</i> is not really <a class=\"default_anchor\" href=\"http://0ar.ch/\">a</a> thing. It is just a term we use to describe what happens when we have a function that has access to outside variables other functions cannot access.\n\n<blockquote>Outside variables are sometimes referred to as <a href=\"http://en.wikipedia.org/wiki/Non-local_variable\">non-local variable.</a></blockquote>\n\nHere is a simple example of Javascipt closure.\n\n<div class=\"pretainer\"><pre class=\"prettyprint lang-js\">\nfunction cat(){\n\n\tvar nyan = \"meow\";\n\n\tfunction speak(){\n\n\t\talert(nyan);\n\n\t}\n\n\tspeak();\n\n}\n</pre></div>\n\n\nNow everytime you call <code>cat()</code>, a new variable, <code>nyan</code>, would be created. And <code>nyan</code> is only accessible by the <code>speak();</code> function inside <code>cat()</code>.\n\n<div class=\"pretainer\"><pre class=\"prettyprint lang-js\">\ncat(); //alerts \"meow\" because speak() is called\n\nalert(nyan); //error: nyan is undefined\n</pre></div>\n\n\nHere is another example of closure.\n\n<div class=\"pretainer\"><pre class=\"prettyprint lang-js\">\nfunction cat(){\n\n\tvar nyan = [\"meow\",\"I am a cat\"];\n\n\tvar x = 0;\n\n\tvar speak_and_change_x =  function(){\n\n\t\talert(nyan[x]);\n\n\t\tx = (x+1===2)? 0 : 1;\n\n\t};\n\n\treturn speak_and_change_x ;\n\n}\n</pre></div>\n\n\nNow when you call <code>cat()</code>, 3 varialbes will be created: an array <code>nyan</code>, an integer <code>x</code>, and a function <code>speak_and_change_x</code>. Both <code>nyan</code> and <code>x</code> can only be accessed by function <code>speak_and_change_x()</code> inside <code>cat()</code>.\n\n<div class=\"pretainer\"><pre class=\"prettyprint lang-js\">\ncat(); //nothing will be alerted.\n\ncat()(); //alert \"meow\";\n</pre></div>\n\n\nSince you are just returning <code>speak_and_change_x</code>, rather than calling it using <code>()</code>, nothing will be alerted when you call <code>cat()</code>. However, calling <code>cat()()</code> will <code>alert (\"meow\")</code> because it is equivalent to calling <code>speak_and_change_x()</code>.\n\nRather than writing <code>cat()()</code> to call the function, normally what we do is to store what <code>cat()</code> returns into a variable.\n\n<div class=\"pretainer\"><pre class=\"prettyprint lang-js\">\nvar Archy = cat(); //since cat() returns speak_and_change_x, Archy is now speak_and_change_x;\n\n//now calling Archy() will be the same as calling speak_and_change_x()\n\nArchy(); //alerts \"meow\"\n\nArchy(); //alerts \"I am a cat\"\n\nArchy(); //alerts \"meow\"\n\nArchy(); //alerts \"I am a cat\"\n</pre></div>\n\n\n<blockquote>\n\nNote: when returning a function, you shouldn't put <code>()</code> behind it. The moment you put <code>()</code> behind a function, you are calling/invoking it.\n\n<div class=\"pretainer\"><pre class=\"prettyprint lang-js\">\nvar a = function (){ return 6 };\n\nvar b = a(); //b is 6.\n\nalert(b); //6 will be alerted;\n\nalert(b()); //error: b is not a function\n\nvar c = a; //c is a function\n\nalert(c); //the entire function will be alearted\n\nalert(c()); //alert 6.\n</pre></div>\n\n<a onclick=\"var c = function (){ return 6 }; alert(c)\">Click here</a> if you are curious what calling <code>alert(c)</code> will look like in the code above.\n\n</blockquote>\n\n<p class=\"text-center\"> ● ● ● </p>\n\n<h3>Bonus: Ternary Operator</h3>\nIn the example above you can see that I am doing something like this:  \n\n<div class=\"pretainer\"><pre class=\"prettyprint lang-js\">\nx = (x+1 === 2)? 0 : 1;</pre></div>\n\nThis is a short way of writing\n\n<div class=\"pretainer\"><pre class=\"prettyprint lang-js nobr\">\nif( x+1 === 2 ){\n\tx = 0;\n}else{\n\tx = 1;\n}</pre></div>\n\nThe way it works can be visitualized in this form:\n\n<div class=\"pretainer\"><pre class=\"prettyprint lang-js\">\nx = (condition)? if true : if false;\n</pre></div>\n\n\n<h3>Bonus: Strict Comparison Operators (<code>===</code> and <code>!==</code>)</h3>\n\nThe <code>===</code> in the code above is known as a Strict Comparison Operator. It is slightly different from <code>==</code>. When we compare two variables like this: <code>a === b</code>, the JavaScript engine will first look at the variables' <i>types</i>, and if they are not the same <i>type</i>, <code>false</code> will be returned immediately. \n\n<div class=\"pretainer\"><pre class=\"prettyprint lang-js\">\n(0 === null) //false; \n\n(0 === \"0\") //false;\n\n(0 === []) //false; \n\n(0 === 0) //true;\n</pre></div>\n\n\nHowever, if we compare two varialbes using <code>==</code>, a type convertion would happen before the actual comparsion occurs.\n\n<div class=\"pretainer\"><pre class=\"prettyprint lang-js\">\n(0 == null) //true; because JS engine has convereted null into integer 0\n\n(0 == \"0\") //true; because JS engine has converted the string \"0\" into integer 0\n\n(0 == []) //true; because JS engine has converted the empty array [] into integer 0 \n\n(0 == 0) //true;\n</pre></div>\n\n\nTherefore, in terms of performance, <code>===</code> would be slightly faster. The other strict comparison operator is <code>!==</code>, which is simply the inverse of <code>===</code>.\n\n<div class=\"pretainer\"><pre class=\"prettyprint lang-js\">\n(0 !== 0) //false;\n\n(0 !== null) //true;\n</pre></div>\n\n\n<p class=\"text-center\"> ● ● ● </p>\n\n(Now back to <a class=\"default_anchor\" href=\"http://0ar.ch/0a-explains-javascript-closure-and-design-patterns\">JavaScript closure</a>)\nWhen you create a closure, instead of returning a function, you can return an object. \n\nHere is another example of closure.\n\n<div class=\"pretainer\"><pre class=\"prettyprint nobr\">\nvar Archy = (function(){\n\tvar nyan = [\"meow\",\"I am a cat\"];\n\tvar x = 0;\n\tvar a =  function(){\n\t\talert(nyan[x]);\n\t};\n\tvar b = function(){\n\t\tx = (x+1===2)? 0 : 1;\n\t};\n\treturn {\n\t\tspeak: a,\n\t\ttransform: b,\n\t\tname: \"Archy\"\n\t}\n})();\n</pre></div>\n\n\nIn the example above, by returning an object, you will be able to return 2 functions that can access <code>nyan</code> and <code>x</code>, which other functions has no access to.\n\n<div class=\"pretainer\"><pre class=\"prettyprint lang-js\">\nalert(nyan[x]); //nyan is undefined, x is undefined.\n\nArchy.speak() //alerts \"meow\"\n\nArchy.speak() //alerts \"meow\"\n\nArchy.transform() //this changes the value of x that Archy.speak() has access to.\n\nArchy.speak() //alerts \"I am a cat\", because x has been changed to 1.\n\nalert(Archy.name); //alerts \"Archy\"\n</pre></div>\n\n\nFunctions in the form <code>function(){...}</code> is known as anonymous function. One cool thing in JavaScript is that functions are actually not required to have names.\n\nBy having a function like this <code>(function(){...})()</code> (enclosing it with brackets and putting another pair of brackets behind), we are basically calling this anonymous function. The <code>()</code> behind can also be used to pass parameters into the function, just like what can be done using the <code>()</code> behind a function name (i.e. <code>alert(\"nyan\")</code> ).\n\n<div class=\"pretainer\"><pre class=\"prettyprint\">\n(function(){ alert(\"x\") })(); //alert \"x\"\n\n(function(a){ alert(a) })(\"x\"); //alert \"x\"\n</pre></div>\n\n\n<strike>What is interesting about enclosing a function with brackets is that the function would not have access to any variable outside unless the variable is passed into it as parameter.</strike> One common practice in Javascript is to pass commonly used variables into anonymous function as parameters for quicker access. By passing a variable into a function, you would be able to access it locally instead of globally when you are inside the function, and thus it would be relatively faster.\n\n<div class=\"pretainer\"><pre class=\"prettyprint\">\n(function(){ console.log(window); })(); //accessing global variable.\n\n(function(window){console.log(window); })(window); //accessing local variable.\n</pre></div>\n\n\n<blockquote>\n\nWhen you surround <i>statements</i> (i.e. a function statement: <code>function hi(){}</code>) in brackets, you are turning them into <i>expressions</i> (in this case it is known as <a href=\"http://en.wikipedia.org/wiki/Immediately-invoked_function_expression\">immediately-invoked function expression (IIFE)</a>) and you can do all sort of things with expressions, similar to how you can do all sorts of things with variables.\n<div class=\"pretainer\"><pre class=\"prettyprint lang-js\">\nvar d = 1 < 0; //d has a boolean value of false.\n\nd.toString(); //d has been converted into a string.\n\nalert(d); //alerts \"false\"\n\nvar a = (1 < 0).toString(); //(1< 0) is being interpreted as an expression.\n\nalert(a); //alerts \"false\";\n\n(function hi(){alert(a)}).call(); //alerts \"false\";\n\n(function hi(){alert(a)})(); //alerts \"false\";\n\nfunction hi(){alert(a)}.call(); //syntax error\n\nfunction hi(){alert(a)}(); //syntax error</pre></div>\n\n</blockquote>\n\n\n<p class=\"text-center\"> ● ● ● </p>\n\n<h3>Now let's talk about  <a class=\"default_anchor\" href=\"http://0ar.ch/0a-explains-javascript-closure-and-design-patterns\">design patterns in JavaScript</a></h3>\n\nThe example above where we create a closure and return an object is actually an example of a design pattern in JavaScript known as The Module Pattern.\n\nThere are many design patterns in JavaScript. Different design patterns are just different ways of writing codes. The Module Pattern, for example, uses <a href=\"http://0ar.ch/0a-explains-javascript-closure-and-design-patterns\">closure</a> to create the illusion of a class object (or a class instance), something that JavaScript doesn't really provide (since JavaScript implements <a href=\"http://en.wikipedia.org/wiki/Prototype-based_programming\">prototype-based OO</a>).  Using The Module Pattern, one would be able to have <i>public</i> and <i>private</i> functions and variables in an object (as if it is an instance of a class in <a href=\"http://en.wikipedia.org/wiki/Class-based_programming\">class-based OO</a>).\n\n<blockquote>\n\nIn this case, <code>x</code> and <code>nyan</code> are private variables, while <code>name</code> is a public variable and <code>speak()</code> and <code>transform()</code> are public functions. In class-based OO language, when something is public, it simply means that it is globally accessible. When something is private, only the instance and class functions (In this case there isn't a class function) are able to access it.\n\n</blockquote> \n\n\nNow let's move on to The Singleton Pattern, another beginner design pattern that makes good use of closure. The Singleton Pattern is like an upgrade version of The Module Pattern. Besides creating an illusion of a class object, it creates an illusion of a class function that either constructs the object (an instance of the class) or returns an already constructed object.\n\n<div class=\"pretainer\"><pre class=\"prettyprint nobr\">\nvar Archy = (function(){\n\n\tfunction cat (obj){\n\t\tvar nyan = obj.nyan,\n\t\tx = obj.x;\n\t\tthis.speak = function(){\n\t\t\talert(nyan[x]);\n\t\t};\n\t\tthis.transform = function(){\n\t\t\tx = (x+1===2)? 0 : 1;\n\t\t};\n\t}\n\n\tvar instance;\n\tvar _static = {\n\t\tname: \"Archy\",\n\t\tget_cat: function(obj){\n\t\tif(instance === undefined){\n\t\t\tinstance = new cat(obj);\n\t\t}else{\n\t\t\tconsole.log(\"instance already created. nyannannn.\");\n\t\t}\n\t\treturn instance;\n\t\t} \n\t}\n\treturn _static;\n})();\n\nvar nyancat = Archy.get_cat({nyan: [\"meow\",\"I am a cat\"], x: 0}); //it creats an instance\nnyancat.speak(); //alerts \"meow\";\nnyancat.transform();\nnyancat.speak(); //alerts \"I am a cat\";\nvar mycat = Archy.get_cat(); //\"instance already created. nyannannn.\"\nmycat.speak(); //alerts \"I am a cat\";\n</pre></div>\n\n\nBasically, as we can see, we restrict instantiation of a class to a single object in The Singleton Pattern.\n\n(From the example above:)\n<div class=\"pretainer\"><pre class=\"prettyprint nobr\">\nvar instance;\nvar _static = {\n\t\tname: \"Archy\",\n\t\tget_cat: function(obj){\n\t\tif(instance === undefined){\n\t\t\tinstance = new cat(obj);\n\t\t}else{\n\t\t\tconsole.log(\"instance already created. nyannannn.\");\n\t\t}\n\t\treturn instance;\n\t\t} \n\t}\n</pre></div>\n\n\nHere we can see that nothing will happen to the variable <code>instance</code>, which would be returned, if <code>instance</code> is not <code>undefined</code>.\n\nConclusion: in The Singleton Pattern, the object/instance can only be accessed using the <code>Archy.get_cat()</code> function. So Archy is acting like the agent of the cat. There is no other way to get the cat unless you ask  <a class=\"default_anchor\" href=\"http://0ar.ch/\">Archy</a>. And Archy would create the cat for you the first time you ask for the cat. After that Archy would just keep giving you the same old cat.\n\nThrrp.\n\n<p class=\"text-center\">  - The End - </p>\n\n<blockquote>If you want to learn more about Javascript's design patterns, here is <a href=\"http://addyosmani.com/resources/essentialjsdesignpatterns/book/\">a great book written by Addy Osmani</a>.</blockquote>",
             "coverImg": "assets/img/img2.jpg",
             "createdAt": new Date("2014-12-07T02:38:06.380Z"),
             "foot": "",
             "head": "$.getScript( \"https://google-code-prettify.googlecode.com/svn/loader/prettify.js\", function( data, textStatus, jqxhr ) {\n  prettyPrint();\n});",
             "maxTime": "19",
             "metaDescription": "JavaScript closure and design patterns explained in possibly the most comprehensible way possible.",
             "metaKeywords": "0a, JavaScript, closure, design patterns ",
             "minTime": "9",
             "published": true,
             "publishedAt": new Date("2014-09-17T09:32:42.364Z"),
             "slug": "0a-explains-javascript-closure-and-design-patterns",
             "subtitle": "- for those who are new to JavaScript -",
             "subtitle2": "",
             "title": "0a explains: JavaScript closure and design patterns",
             "title2": "0a explains: JavaScript closure and design patterns",
             "updatedAt": new Date("2014-10-06T15:51:48.850Z")
         });
         Article._collection.insert({
             "category": "Physics",
             "content": "Sometime, somewhere, in this world in which we live\na massive astronomical object would collapse and explode \nilluminating its galaxy in a way\nso substantial, it can be observed \nat some point in the future, by a civilization light years away\n\nSometime, somewhere, in this world in which we live\nenergy in the form of mass would accumulate in a tiny region \ndistorting the fabric of space-time in a way\nso non-Euclidean, it forms a boundary \na horizon across which even for photons there is no “escape”\n\nYou may find cosmological events like these \nrather mind-boggling, rather strange\nit is hard to imagine that this is indeed reality\nBut perhaps what’s more mind-boggling, more strange\nis the very fact that you exist\n<a class=\"default_anchor\" href=\"http://0ar.ch/sometime-somewhere-in-this-world-in-which-we-live\">sometime, somewhere, in this world in which we live</a> \n\nAnd what makes this even more astounding\nis that you are capable of forming mental construct\nand using reasoning, you can have a better understanding\nof how things in this universe work\nYou may not be completely right\nabout the mechanics of certain things\nbut it is alright, for at least you have tried\nsometime, somewhere, in this world in which we live\n\n<p class=\"text-center\"> ● ● ● </p>\n\n<a class=\"default_anchor\" href=\"http://0ar.ch/\">Author's</a> Note: On line 10, by <i>no “escape”</i> I do not mean that photons would be \"entrapped\" in the <a href=\"http://en.wikipedia.org/wiki/Black_hole\">black hole</a> for eternity, and information is forever lost upon entering the <a href=\"http://en.wikipedia.org/wiki/Event_horizon\">event horizon</a>, which violates the conservation of information in the universe (this is actually known as the <a href=“http://en.wikipedia.org/wiki/Black_hole_information_paradox”>black hole information paradox</a>). \n\nA black hole is constantly evaporating and would eventually disappear. Now and then, pairs of <a href=\"http://en.wikipedia.org/wiki/Virtual_particle\">virtual particles</a> are produced in the vacuum near the event horizon due to a phenomenon known as <a href=\"http://en.wikipedia.org/wiki/Quantum_fluctuation\">quantum fluctuation</a> that happens everywhere in this universe. In the usual case they will just <a href=\"http://en.wikipedia.org/wiki/Annihilation\">annihilate</a> each other and back to non-existence. But there are times when one of them falls into the black hole, while the other escapes as <a href=\"http://en.wikipedia.org/wiki/Black-body_radiation\">black body radiation</a> known as <a href=\"http://en.wikipedia.org/wiki/Hawking_radiation\">Hawking radiation</a>. When this happens, the particle that falls into the black hole would appear to have negative energy. The creation of the particle pair requires energy. If they manage to annihilate each other within <a href=\"http://en.wikipedia.org/wiki/Planck_time\">Planck time</a>, they stay <a href=\"http://en.wikipedia.org/wiki/Virtual_state_(physics)\">\"virtual\"</a> throughout their existence. If one of them becomes \"real\", a nearby region with high energy potential would experience a decrease in energy. And thus a black hole shrinks over time and loses its energy (<a href=\"http://en.wikipedia.org/wiki/Mass%E2%80%93energy_equivalence\">in the form of mass</a>). The total lifespan of a black hole of M solar masses is <a href=\"http://xaonon.dyndns.org/hawking/\">calculated</a> to be roughly 2 x 10<span class=\"sup\">67</span> M<span class=\"sup\">3</span> years, which is still pretty long.\n\nHowever, according to the <a href=\"http://en.wikipedia.org/wiki/No-hair_theorem\">no-hair theorem</a>, Hawking radiation appears contain information that depends only on the mass, angular momentum, and charge of the black hole, unlike normal thermal radiation which contains information about the body. It is as if information about the particles that fall into balck hole is lost. This is how the black hole information paradox arises. Information conversation in the black hole scenario is currently an open question in the physics community. One famous solution is the <a href=\"http://en.wikipedia.org/wiki/Holographic_principle\">holographic principle</a> within the framework of <a href=\"http://en.wikipedia.org/wiki/String_theory\">string theory</a>.\n\n<iframe width=\"640\" height=\"360\" src=\"//www.youtube.com/embed/2DIl3Hfh9tY\" frameborder=\"0\" allowfullscreen></iframe>\n\n\nWhen <a href=\"http://en.wikipedia.org/wiki/General_relativity\">general relativity</a> (the theory that predicted the existence of black holes) meets <a href=\"http://en.wikipedia.org/wiki/Quantum_mechanics\">quantum mechanics</a>, we can see that there is something more about the fabric of space-time - something very fundamental about our universe - that we do not yet quite understand. And that's what makes this universe such an interesting place to be in. There are always new things to be discovered and new ways of seeing the same thing.\n\n<p class=\"text-center\">- to be continued -</p>",
             "coverImg": "assets/img/img3.jpg",
             "createdAt": new Date("2014-12-08T07:15:50.934Z"),
             "foot": "",
             "head": "",
             "maxTime": "6",
             "metaDescription": "A short poem, followed by the black hole information paradox explained in layman's terms.",
             "metaKeywords": "",
             "minTime": "4",
             "published": true,
             "publishedAt": new Date("2014-09-23T09:32:42.364Z"),
             "slug": "sometime-somewhere-in-this-world-in-which-we-live",
             "subtitle": "a short poem + an intro to the black hole information paradox",
             "subtitle2": "Archy: \"Cover picture is <a href=\"https://www.flickr.com/photos/nasamarshall/14135176372\">Inside the Flame Nebula</a>, an optical image, from the Digitized Sky Survey, of a large field centered on the Flame Nebula by NASA, Chandra, 05/07/14.\"",
             "title": "Sometime, somewhere, in this world in which we live",
             "title2": "Sometime, somewhere, in this world in which we live",
             "updatedAt": new Date("2014-10-11T17:01:28.850Z")
         });
     }
     //remove twitter config for login if you have accidentally screwed it up~

     //Accounts.loginServiceConfiguration.remove({
     //  service: "twitter"
     //});
 });